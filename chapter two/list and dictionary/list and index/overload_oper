using System;
using System.Collections;
using System.Collections.Generic;
namespace overload
{

    public class MyList<T> : IEnumerable<T>
    {
        #region 
        T[] array;
        int count = 0;

        public MyList()
        {
            array = new T[100];
        }
        void Enlarge()
        {
            throw new NotImplementedException();
        }
        public void Add(T items)
        {
            if (count == array.Length)
                Enlarge();
            array[count] = items;
            count++;
        }

        public IEnumerator<T> GetEnumerator()
        {
            for (int i = 0; i < count; i++)
                yield return array[i];
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        //индексация
        public T this[int index]
        {
            get
            {
                if (index < 0 || index >= count) throw new IndexOutOfRangeException();
                return array[index];
            }
            set
            {
                if (index < 0 || index >= count) throw new IndexOutOfRangeException();
                array[index] = value;
            }
        }
        public int Count { get { return count; } }
        #endregion


    }
    class Point
    {
        public int X { get; set; }
        public int Y { get; set; }

        public override bool Equals(object obj)
        {
            if (!(obj is Point)) return false;
            var p = obj as Point;
            return X == p.X && Y == p.Y;
        }
        public static bool operator ==(Point p1, Point p2)
        {
            return p1.X == p2.X && p1.Y == p2.Y;
        }
        public static bool operator !=(Point p1, Point p2)
        {
            return !(p1 == p2);
        }
        public static Point operator +(Point p1, Point p2)
        {
            return new Point { X = p1.X + p2.X, Y = p1.Y + p2.Y };
        }

        public override string ToString()
        {
            return string.Format("{1} {2}", X,Y) ;
        }
    }

    struct Size
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }

    class Program
    {
        static void Main(string[] args)
        {
            var p1 = new Point { X = 1, Y = 1 };
            var p2 = new Point { X = 1, Y = 1 };

            var s1 = new Size { Width = 1, Height = 1 };
            var s2 = new Size { Width = 1, Height = 1 };

        }
    }
}
