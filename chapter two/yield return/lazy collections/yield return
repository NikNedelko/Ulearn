using System;
using System.Collections;
using System.Collections.Generic;
namespace yield_return
{

    public class QueueItem<T>
    {
        public T Value { get; set; }
        public QueueItem<T> Next { get; set; }
    }



    public class Queue<T> : IEnumerable<T>
    {
        QueueItem<T> head;
        QueueItem<T> tail;
        public bool IsEmpty { get { return head == null; } }

        #region 
        public void Enqueue(T value)
        {
            if (IsEmpty)
                tail = head = new QueueItem<T> { Value = value, Next = null };
            else
            {
                var item = new QueueItem<T> { Value = value, Next = null };
                tail.Next = item;
                tail = item;
            }
        }

        public T Deequeue()
        {
            if (head == null) throw new InvalidOperationException();
            var result = head.Value;
            head = head.Next;
            if (head == null)
                tail = null;
            return result;
        }


        #endregion

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }
        public IEnumerator<T> GetEnumerator()
        {
            var current = head;

            while (current != null)
            {
                yield return current.Value;
                current = current.Next;
            }
        }
    }

    public class Sequences
    {
        
        public IEnumerable<int> Fibbonacci{
            get{}
        }
    }

    public class FibonacciSequence : IEnumerable<int>
    {
        public IEnumerator<int> GetEnumerator()
        {
           return new FibonacciEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }
    }

    public class FibonacciEnumerator : IEnumerator<int>
    {
        int currentIndex = -1;
         int currentValue =1;
         int previousValue = 1;
        public int Current {
           get{ 
                if (currentIndex == 0 || currentIndex == 1) return 1;
                return currentValue;
               }
        } 

        object IEnumerator.Current {
            get{return Current;}
        }

        public void Dispose()
        {
            
        }

        public bool MoveNext()
        {
            currentIndex++;
            if (currentIndex>1)
            {
                var newValue = currentValue+previousValue;
                previousValue=currentValue;
                currentValue = newValue;
            }
            return true;
        }

        public void Reset()
        {
           
        }
    }

    public class Program
    {
        public static void Main(string[] args)
        {
            var queue = new Queue<int>();
            queue.Enqueue(1);
            queue.Enqueue(2);
            queue.Enqueue(3);

            while (!queue.IsEmpty)
                System.Console.WriteLine(queue.Deequeue());

            foreach (var value in queue)
                System.Console.WriteLine(value);

        }

    }

}
